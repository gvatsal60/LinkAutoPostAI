'''
Generate LinkedIn post content using LangChain and OpenAI.
'''
import sys
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.messages import SystemMessage, HumanMessage
import requests

from config import get_env_variable
from linkedin import linkedin_post_content


def generate_linkedin_post(model_name: str, api_key: str) -> str:
    """
    Generate a LinkedIn post about software engineering best practices.
    Args:
        model_name (str): The name of the language model to use.
        api_key (str): The API key for authentication.
    Returns:
        str: Generated LinkedIn post content.
    """
    # 1️⃣ System message: defines the role and style
    system_msg = SystemMessage("""
    You are a professional content creator for software engineers and tech leaders.
    Write one engaging, insightful, and concise post (5-7 sentences maximum) that \
    offers an actionable tip or a key insight specifically about software engineering \
    best practices, system design, or modern development methodologies.
    Vary the topics and approaches every time, ensuring fresh and unique content with each post.

    The tone should be professional yet approachable.
    Include at least three relevant emojis and a thoughtful set of hashtags \
    related to the topic.

    Note:
    Do not make it sound like a sales pitch or advertisement.
    Do not include introductory phrases.
    """)

    # 2️⃣ Human message: defines the specific task
    human_msg = HumanMessage("""
    Generate a single, informational post focusing on a software engineering best practice.
    Keep it concise (5-7 sentences), engaging, and professional.
    Include relevant emojis and hashtags.
    """)

    messages = [
        system_msg,
        human_msg
    ]

    try:
        model = ChatGoogleGenerativeAI(
            model=model_name,
            api_key=api_key,
        )

        response = model.invoke(messages)
    except Exception as e:
        raise RuntimeError(
            'An error occurred while generating the LinkedIn post. Please try again later. '
            f"Exception: {e}"
        ) from e

    return response.content


def main() -> None:
    """
    Main function to generate and post content.
    """
    # Set your API key
    try:
        api_key = get_env_variable('MODEL_API_KEY')
        model_name = get_env_variable('MODEL_NAME')
        linkedin_token = get_env_variable('LINKEDIN_ACCESS_TOKEN')
    except (ImportError, EnvironmentError) as e:
        print(e)
        sys.exit(1)

    try:
        post_content_txt = generate_linkedin_post(
            model_name=model_name, api_key=api_key)
    except RuntimeError as e:
        print(e)
        sys.exit(1)

    disclaimer = (
        '⚠️  Note: The post was generated by an AI. ⚠️'
    )

    post_content_txt = f"{post_content_txt}\n\n{disclaimer}"

    try:
        linkedin_post_content(
            access_token=linkedin_token,
            message=post_content_txt
        )
    except KeyError as err:
        print(f"Key Error: {err}")
    except requests.exceptions.HTTPError as err:
        print(
            f"HTTP Error: {err} \
            (status {err.response.status_code if err.response else 'unknown'})"
        )
    except requests.exceptions.RequestException as err:
        print(f"An error occurred during the request: {err}")


if __name__ == '__main__':
    main()
